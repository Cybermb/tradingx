{"version":3,"sources":["functions/bitfinexApi/BitfinexApi.ts","components/CandleView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["url","pathParams","a","limit","queryParams","fetch","req","json","response","result","map","candle","timestamp","open","close","high","low","volume","console","log","request","data","React","max","min","margin","updateDataTable","getCoinCandles","candleList","updateCandleList","setCandleViewData","className","key","candleData","candleViewData","Array","Number","generateArray","Candle","candleHeight","candleType","candleColor","candlePos","candleBodyHeight","candleBodyPos","style","height","top","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document"],"mappings":"kQAEMA,EAAM,yDAENC,EAAa,gC,4CAKnB,gDAAAC,EAAA,6DAAuBC,EAAvB,+BAAsC,IAC5BC,EADV,gBACiCD,EADjC,8BAG0BE,MAAM,GAAD,OAAIL,EAAJ,YAAWC,EAAX,YAAyBG,IAHxD,cAGcE,EAHd,gBAI+BA,EAAIC,OAJnC,cAIcC,EAJd,OAKcC,EALd,YAKsCD,EAASE,KAAI,SAACC,GAAsB,IAAD,cACTA,EADS,GAE7D,MAAO,CAACC,UAFqD,KAE1CC,KAF0C,KAEpCC,MAFoC,KAE7BC,KAF6B,KAEvBC,IAFuB,KAElBC,OAFkB,UALzE,kBASeR,GATf,kCAYQS,QAAQC,IAAR,MAZR,iCAcW,IAdX,2D,sBAiBeC,M,2CCwDf,EA/CmB,SAAC,GAAqB,EAAnBC,KAAmB,MACEC,aAAvC,IADqC,mBAC/B,EAD+B,KAC/B,EAD+B,OAEJA,cAAjC,GAFqC,gCAGO,aAAe,CACvDC,IADuD,EAEvDC,IAFuD,EAGvDC,OAAQ,MANyB,mBAG/B,EAH+B,KAG/B,EAH+B,KAS/BC,EAAe,uCAAG,gCAAAxB,EAAA,sEACgByB,IADhB,OACdC,EADc,OAEhB,EAAa,EAAb,EAAJ,EACAA,WAAmB,YACXjB,OAAJ,IAAuBY,EAAMZ,EAANY,MACnBZ,MAAJ,IAAsBa,EAAMb,EAANa,QAE1BK,KACAC,EAAkB,CAACP,MAAKC,MAAKC,OAAQF,EAAMC,IAC3CN,sBAAuBK,EAAvBL,GAToB,2CAAH,qDAwBrB,OAJAI,eAAgB,WACZI,MADJJ,IAIO,yBAAKS,UA3DhB,YA4DQ,yBAAKA,UArDb,YAsDaH,EAAA,KAAe,cACZ,OAAO,qBAAQI,IAAA,gBAAR,GAA+BC,WAA/B,EAAmDC,eAA1D,QAGR,yBAAKH,UAjDb,YAgC0B,SAAC,GAA0C,IAA1C,EAA0C,EAA1C,IAAMP,EAAoC,EAApCA,IACzB,mBAAWW,MAAA,KAAWA,UAAX,aAAiC,cACxC,OAAOC,QAAQb,EAAD,QAAPa,WAAP,OAgBCC,CAAA,QAAkC,cAC/B,OAAO,yBAAKL,IAAA,eAAL,IAAP,SAmCVM,EAAS,SAAC,GAAiD,IAAjD,EAAiD,EAAjD,WAAcJ,EAAmC,EAAnCA,eACpB,EAAN,EAAM,OAAN,EAAM,MAAN,EAAM,KAAmBpB,EAAzB,EAAyBA,MACnB,EAAN,EAAM,IAAYW,GAAlB,EAAM,IAAN,EAAkBA,QACZc,GAAgBxB,EAAD,KAArB,IACMyB,EAAa3B,KACb4B,EAAcD,EAAa,OAAjC,OAEME,GAAanB,EAAD,KAAlB,IAEMoB,GAAoB9B,EAAD,MAA2B2B,GAAU,IATD,KAWvDI,GAAiBJ,EAAczB,EAAJ,EAAqBA,EAAhC,KAXuC,IAc7D,OAAO,yBAAKgB,UApChB,WAoCsCc,MAAO,CACrCC,OADqC,EAErCC,IAAKL,IAEL,yBAAKX,UAhCb,WAgCuCc,MAAO,CAClCC,OADkC,EAElCE,gBAFkC,EAGlCD,IAAKH,KAET,yBAAKb,UA/Bb,UA+BuCc,MAAO,CAClCG,gBAAiBP,O,MC1H7B,MARA,WACE,OACE,yBAAKV,UAAL,OACE,4BCMSkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,WACE,kBAAC,IAAD,gBACE,2BAEFC,wBAJFD,SAUAT,M","file":"static/js/main.7ea85ff1.chunk.js","sourcesContent":["import ICandle from \"../../types/candleData\"\r\n\r\nconst url = 'https://try.readme.io/https://api-pub.bitfinex.com/v2/'\r\n\r\nconst pathParams = 'candles/trade:1m:tXRPUSD/hist' // Change these based on relevant path params. /last for last candle\r\n\r\n/**\r\n * returns a list with candle data { timestamp, open, close, high, low, volume }\r\n */\r\nasync function request(limit:number = 100): Promise<ICandle[]> {\r\n    const queryParams = `limit=${limit}&sort=-1`\r\n    try {\r\n        const req = await fetch(`${url}/${pathParams}?${queryParams}`)\r\n        const response = await req.json()\r\n        const result: ICandle[] = [...response.map((candle: number[]) => {\r\n            const [timestamp, open, close, high, low, volume] = candle\r\n            return {timestamp, open, close, high, low, volume}\r\n        })]\r\n        return result\r\n    }\r\n    catch (err) {\r\n        console.log(err)\r\n    }\r\n    return []\r\n}\r\n\r\nexport default request\r\n\r\n\r\n","import React from 'react';\r\nimport { css } from '@linaria/core';\r\nimport getCoinCandles from '../functions/bitfinexApi/BitfinexApi';\r\nimport ICandle from '../types/candleData';\r\n\r\ninterface IProps {\r\n    data?: any\r\n}\r\n\r\nconst cssCandleWrapper = css`\r\n    width: 100%;\r\n    height: 500px;\r\n    background-color: #30353e;\r\n    display: flex;\r\n    flex-flow: row;\r\n`\r\nconst cssCandleView = css`\r\n    width: 100%;\r\n    // background-color: #30353e;\r\n    display: flex;\r\n    position: relative;\r\n    flex: 1;\r\n    flex-flow: row-reverse;\r\n    padding: 10px;\r\n`\r\nconst cssCandleValues = css`\r\n    heigth: 100%;\r\n    width: 80px;\r\n    display: flex;\r\n    padding: 10px 0;\r\n    flex-flow: column-reverse;\r\n    justify-content: space-around;\r\n    border-left: 1px #555 solid;\r\n`\r\n\r\nconst CandleView = ({ data }: IProps) => {\r\n    const [candleList, updateCandleList] = React.useState<ICandle[]>([])\r\n    const [loading, toggleLoading] = React.useState(true)\r\n    const [candleViewData, setCandleViewData] = React.useState({\r\n        max: 0,\r\n        min: 0,\r\n        margin: 10,\r\n    })\r\n\r\n    const updateDataTable = async () => {\r\n        const candleList: ICandle[] = await getCoinCandles()\r\n        let [max, min] = [0, 0]\r\n        candleList.forEach((candle: ICandle) => {\r\n            if (candle.high > max) max = candle.high\r\n            if (candle.low > min) min = candle.low\r\n        })\r\n        updateCandleList(candleList)\r\n        setCandleViewData({max, min, margin: max - min})\r\n        console.log(\"margin:\", max - min)\r\n\r\n    }\r\n\r\n    const generateArray = ({max, min}: {min: number, max:number}) => {\r\n        return [...Array.from(Array(10).keys()).map((_null, index) => {\r\n            return Number((max - min) * index/10 + min).toFixed(4)\r\n        })]\r\n    }\r\n\r\n    // componentDidMount\r\n    React.useEffect(() => { \r\n        updateDataTable()\r\n    }, [])\r\n\r\n    return <div className={cssCandleWrapper}>\r\n        <div className={cssCandleView}>\r\n            {candleList.map((candle, index) => {\r\n                return <Candle key={`candle${index}`} candleData={candle} candleViewData={candleViewData} />\r\n            })}\r\n        </div>\r\n        <div className={cssCandleValues}>\r\n            {generateArray(candleViewData).map((value, index) => {\r\n                return <div key={`value${index}`}>{value}</div>\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default CandleView\r\n\r\ninterface ICandleProps {\r\n    candleData: ICandle\r\n    margin: number\r\n}\r\n\r\nconst cssCandle = css`\r\n    display: flex;\r\n    position: relative;\r\n    max-width: 30px;\r\n    flex: 1;\r\n    margin: 0 1px;\r\n`\r\n\r\nconst cssCandleBody = css`\r\n    width: 100%;\r\n    background-color: #0f0;\r\n    position: relative;\r\n`\r\n\r\nconst cssCandleWick = css`\r\n    height: 100%;\r\n    width: 1px;\r\n    background-color: #0f0;\r\n    position: relative;\r\n    right: 50%;\r\n`\r\n\r\nconst Candle = ({ candleData, candleViewData }: ICandleProps) => {\r\n    const { high, low, open, close } = candleData\r\n    const { max, min, margin } = candleViewData\r\n    const candleHeight = (high - low) / margin * 100\r\n    const candleType = open <= close ? true : false // green or red\r\n    const candleColor = candleType ? \"#0f0\" : \"#f00\"\r\n\r\n    const candlePos = (max - high) / margin * 100\r\n\r\n    const candleBodyHeight = (open - close) / margin * (candleType ? -100 : 100)\r\n    // const candleBodyPos = (candleType ? (high - close) : (close - low)) / margin * 100 // ?\r\n    const candleBodyPos = (candleType ? (high - close) : (high - open)) / margin * 100 // ?\r\n\r\n\r\n    return <div className={cssCandle} style={{\r\n        height: candleHeight,\r\n        top: candlePos,\r\n    }}>\r\n        <div className={cssCandleBody} style={{\r\n            height: candleBodyHeight, \r\n            backgroundColor: candleColor,\r\n            top: candleBodyPos\r\n        }}/>\r\n        <div className={cssCandleWick} style={{\r\n            backgroundColor: candleColor,\r\n        }}/>\r\n    </div>\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport CandleView from './components/CandleView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CandleView/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}