{"version":3,"sources":["functions/bitfinexApi/BitfinexApi.ts","components/CandleView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["url","a","limit","coin","pathParams","queryParams","fetch","req","json","response","result","map","candle","timestamp","open","close","high","low","volume","console","log","request","data","React","max","min","margin","updateDataTable","getCoinCandles","candleList","updateCandleList","setCandleViewData","handleMouseEvent","e","setRenderCross","className","onMouseMove","mouseY","setLineYpos","onMouseOver","onMouseOut","id","key","candleData","candleViewData","Array","Number","generateArray","renderCross","style","top","lineYpos","textAlign","value","calculateValueByPixels","Candle","heigth","candleType","candleColor","candlePos","candleHeight","candleBodyHeight","candleBodyPos","height","bottom","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document"],"mappings":"kQAEMA,EAAM,yD,4CAKZ,oDAAAC,EAAA,6DAAuBC,EAAvB,+BAAsC,IAAKC,EAA3C,+BAA8D,MACpDC,EADV,4BAC4CD,EAD5C,YAEUE,EAFV,gBAEiCH,EAFjC,8BAI0BI,MAAM,GAAD,OAAIN,EAAJ,YAAWI,EAAX,YAAyBC,IAJxD,cAIcE,EAJd,iBAK+BA,EAAIC,OALnC,eAKcC,EALd,OAMcC,EANd,YAMsCD,EAASE,KAAI,SAACC,GAAsB,IAAD,cACTA,EADS,GAE7D,MAAO,CAACC,UAFqD,KAE1CC,KAF0C,KAEpCC,MAFoC,KAE7BC,KAF6B,KAEvBC,IAFuB,KAElBC,OAFkB,UANzE,kBAUeR,GAVf,kCAaQS,QAAQC,IAAR,MAbR,iCAeW,IAfX,2D,sBAkBeC,M,2CC6Gf,EAhFkB,SAAC,GAAqB,EAAnBC,KAAmB,MACGC,aAAvC,IADoC,mBAC9B,EAD8B,KAC9B,EAD8B,OAEHA,cAAjC,GAFoC,gCAGJA,aAAhC,IAHoC,mBAG9B,EAH8B,KAG9B,EAH8B,OAIEA,cAAtC,GAJoC,mBAI9B,EAJ8B,KAI9B,EAJ8B,OAKQ,aAAe,CACvDC,IADuD,EAEvDC,IAFuD,EAGvDC,OAAQ,KARwB,mBAK9B,EAL8B,KAK9B,EAL8B,KAW9BC,EAAe,uCAAG,gCAAA1B,EAAA,sEACgB2B,EAAe,IAAnD,OADoB,OACdC,EADc,OAEhB,EAAa,EAAb,EAAJ,WACAA,WAAmB,YACXjB,OAAJ,IAAuBY,EAAMZ,EAANY,MACnBZ,MAAJ,IAAsBa,EAAMb,EAANa,QAE1BK,KACAC,EAAkB,CAACP,MAAKC,MAAKC,OAAQF,EAAMC,IAC3CN,6BACAA,sBAAuBK,EAAvBL,GAVoB,2CAAH,qDAmBfa,EAAmB,SAACC,GACtBd,eACA,cAAIc,OAAwBC,GAA5B,GACKA,OAWTX,eAAgB,WACZI,MADJJ,IAcA,OACI,oCACI,yBAAKY,UAzGjB,YA0GgB,yBAAKA,UA3ErB,WA2EiDC,YAzBlB,SAACH,GAGxB,IAAMI,EAASJ,cAAf,QACAK,MAqB0EC,YAAlE,EAAiGC,WAAjG,IACA,yBAAKC,GAAL,YAAoBN,UAnGpC,YAoGqBN,EAAA,KAAe,cACZ,OAAO,qBAAQa,IAAA,gBAAR,GAA+BC,WAA/B,EAAmDC,eAA1D,QAGR,yBAAKT,UA5FrB,YAiD0B,SAAC,GAA0C,IAA1C,EAA0C,EAA1C,IAAMV,EAAoC,EAApCA,IACzB,mBAAWoB,MAAA,KAAWA,UAAX,aAAiC,cACxC,OAAOC,QAAQtB,EAAD,QAAPsB,WAAP,OA0CSC,CAAA,QAAkC,cAC/B,OAAO,yBAAKL,IAAA,eAAL,IAAP,OAGPM,GAAe,yBAAKb,UA/ErC,WA+E8Dc,MAAO,CAACC,IAAKC,MAE/D,yBAAKF,MAAO,CAACG,UAAW,UA1BD,WAAM,IAC3B,EAAN,EAAM,IAAO1B,EAAb,EAAaA,OACP2B,EAAQ7B,EAAO2B,EAAD,IAApB,EACA,OAAIE,EAAJ,EAAsBA,UAAtB,GACSA,EAAJ,GAAuBA,UAAvB,GACIA,EAAJ,IAAwBA,UAAxB,GACIA,EAAJ,IAAyBA,UAAP,GAChBA,UAAP,GAmBuCC,MAoCzCC,EAAS,SAAC,GAAiD,IAAjD,EAAiD,EAAjD,WAAcX,EAAmC,EAAnCA,eACpB,EAAN,EAAM,OAAN,EAAM,QAAN,EAAM,KAAqB3B,EAA3B,EAA2BA,IACrB,EAAN,EAAM,IAAOQ,EAAb,EAAaA,IACP+B,EAAN,IACM9B,EAAUF,EAAhB,EAGMiC,EAAa3C,KACb4C,EAAcD,EAAa,OAAjC,OAEME,GAAa1C,EAAD,KAAlB,EACM2C,GAAgB5C,EAAD,KAArB,EAEM6C,GAAoB/C,EAAD,MAA2B2C,GAAa,IAAjE,GACMK,GAAiBL,EAAczC,EAAJ,EAAqBA,EAAhC,KAAtB,EAGA,OAAO,yBAAKmB,UAxChB,UAwCsCc,MAAO,CACrCc,OADqC,EAErCC,OAAQL,IAER,yBAAKxB,UAnCb,UAmCuCc,MAAO,CAClCc,OADkC,EAElCE,gBAFkC,EAGlCf,IAAKY,KAET,yBAAK3B,UAlCb,UAkCuCc,MAAO,CAClCgB,gBAAiBP,O,MClL7B,MARA,WACE,OACE,yBAAKvB,UAAL,OACE,4BCMS+B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,WACE,kBAAC,IAAD,gBACE,2BAEFC,wBAJFD,SAUAT,M","file":"static/js/main.a8a77447.chunk.js","sourcesContent":["import ICandle from \"../../types/candleData\"\r\n\r\nconst url = 'https://try.readme.io/https://api-pub.bitfinex.com/v2/'\r\n\r\n/**\r\n * returns a list with candle data { timestamp, open, close, high, low, volume }\r\n */\r\nasync function request(limit:number = 100, coin:'BTC'|'XRP' = 'XRP'): Promise<ICandle[]> {\r\n    const pathParams = `candles/trade:1m:t${coin}USD/hist` // Change these based on relevant path params. /last for last candle\r\n    const queryParams = `limit=${limit}&sort=-1`\r\n    try {\r\n        const req = await fetch(`${url}/${pathParams}?${queryParams}`)\r\n        const response = await req.json()\r\n        const result: ICandle[] = [...response.map((candle: number[]) => {\r\n            const [timestamp, open, close, high, low, volume] = candle\r\n            return {timestamp, open, close, high, low, volume}\r\n        })]\r\n        return result\r\n    }\r\n    catch (err) {\r\n        console.log(err)\r\n    }\r\n    return []\r\n}\r\n\r\nexport default request\r\n\r\n\r\n","import React from 'react';\r\nimport { css } from '@linaria/core';\r\nimport getCoinCandles from '../functions/bitfinexApi/BitfinexApi';\r\nimport ICandle from '../types/candleData';\r\n\r\ninterface IProps {\r\n    data?: any\r\n}\r\n\r\nconst cssGraphWrapper = css`\r\n    width: 100%;\r\n    height: 500px;\r\n    background-color: #30353e;\r\n    display: flex;\r\n    flex-flow: row;\r\n    position: relative;\r\n`\r\nconst cssGraphView = css`\r\n    width: 100%;\r\n    // background-color: #30353e;\r\n    display: flex;\r\n    position: relative;\r\n    flex: 1;\r\n    flex-flow: row-reverse;\r\n    align-items: flex-end;\r\n    // padding: 10px;\r\n    overflow-x: scroll;\r\n    overflow: visible;\r\n`\r\nconst cssCandleValues = css`\r\n    heigth: 100%;\r\n    width: 80px;\r\n    display: flex;\r\n    padding: 10px 0;\r\n    flex-flow: column-reverse;\r\n    justify-content: space-around;\r\n    border-left: 1px #555 solid;\r\n    overflow-x: hidden;\r\n`\r\n\r\nconst cssGraphOverlay = css`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    z-index: 10;\r\n`\r\n\r\nconst cssGraphLine = css`\r\n    width: 100%;\r\n    heigth: 0;\r\n    position: absolute;\r\n    border-top: 1px #aaa dashed;\r\n`\r\n\r\nconst GraphView = ({ data }: IProps) => {\r\n    const [candleList, updateCandleList] = React.useState<ICandle[]>([])\r\n    const [loading, toggleLoading] = React.useState(true)\r\n    const [lineYpos, setLineYpos] = React.useState(0)\r\n    const [renderCross, setRenderCross] = React.useState(false)\r\n    const [candleViewData, setCandleViewData] = React.useState({\r\n        max: 0,\r\n        min: 0,\r\n        margin: 10,\r\n    })\r\n\r\n    const updateDataTable = async () => {\r\n        const candleList: ICandle[] = await getCoinCandles(100, \"XRP\")\r\n        let [max, min] = [0, 9999999999]\r\n        candleList.forEach((candle: ICandle) => {\r\n            if (candle.high > max) max = candle.high\r\n            if (candle.low < min) min = candle.low\r\n        })\r\n        updateCandleList(candleList)\r\n        setCandleViewData({max, min, margin: max - min})\r\n        console.log(\"max\", max, \"min\", min)\r\n        console.log(\"margin:\", max - min)\r\n    }\r\n\r\n    const generateArray = ({max, min}: {min: number, max:number}) => {\r\n        return [...Array.from(Array(10).keys()).map((_null, index) => {\r\n            return Number((max - min) * index/10 + min).toFixed(4)\r\n        })]\r\n    }\r\n\r\n    const handleMouseEvent = (e:any) => {\r\n        console.log(e)\r\n        if (e.type === \"mouseover\") setRenderCross(true)\r\n        else setRenderCross(false)\r\n    }\r\n\r\n    const updatePointerValue = (e:any) => {\r\n        // console.log(e)\r\n        // if (e.target.id !== \"CandleView\") return\r\n        const mouseY = e.nativeEvent.offsetY\r\n        setLineYpos(mouseY)\r\n    }\r\n\r\n    // componentDidMount\r\n    React.useEffect(() => { \r\n        updateDataTable()\r\n    }, [])\r\n\r\n    const calculateValueByPixels = () => {\r\n        const { max, margin } = candleViewData\r\n        const value = max - (lineYpos / 500) * margin\r\n        if (value < 1) return value.toFixed(5)\r\n        else if (value < 10) return value.toFixed(4)\r\n        else if (value < 100) return value.toFixed(3)\r\n        else if (value < 1000) return value.toFixed(2)\r\n        return value.toFixed(0)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={cssGraphWrapper}>\r\n                <div className={cssGraphOverlay} onMouseMove={updatePointerValue} onMouseOver={handleMouseEvent} onMouseOut={handleMouseEvent} />\r\n                <div id=\"GraphView\" className={cssGraphView}>\r\n                    {candleList.map((candle, index) => {\r\n                        return <Candle key={`candle${index}`} candleData={candle} candleViewData={candleViewData} />\r\n                    })}\r\n                </div>\r\n                <div className={cssCandleValues}>\r\n                    {generateArray(candleViewData).map((value, index) => {\r\n                        return <div key={`value${index}`}>{value}</div>\r\n                    })}\r\n                </div>\r\n                {renderCross && <div className={cssGraphLine} style={{top: lineYpos}} />}\r\n            </div>\r\n            <div style={{textAlign: \"right\"}}>{calculateValueByPixels()}</div>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default GraphView\r\n\r\ninterface ICandleProps {\r\n    candleData: ICandle\r\n    candleViewData: {max: number, min: number, margin: number}\r\n}\r\n\r\nconst cssCandle = css`\r\n    display: flex;\r\n    position: relative;\r\n    max-width: 30px;\r\n    min-width: 1xp;\r\n    flex: 1;\r\n    margin: 0 1px;\r\n`\r\n\r\nconst cssCandleBody = css`\r\n    width: 100%;\r\n    background-color: #0f0;\r\n    position: relative;\r\n`\r\n\r\nconst cssCandleWick = css`\r\n    height: 100%;\r\n    width: 1px;\r\n    background-color: #0f0;\r\n    position: relative;\r\n    right: 50%;\r\n`\r\n\r\nconst Candle = ({ candleData, candleViewData }: ICandleProps) => {\r\n    const { open, close, high, low } = candleData\r\n    const { max, min } = candleViewData\r\n    const heigth = 500\r\n    const margin = (max - min)\r\n    const pixelValue = margin / 500\r\n\r\n    const candleType = open <= close ? true : false // green or red\r\n    const candleColor = candleType ? \"#0c0\" : \"#c00\"\r\n\r\n    const candlePos = (low - min) / margin * heigth\r\n    const candleHeight = (high - low) / margin * heigth\r\n\r\n    const candleBodyHeight = (open - close) / margin * (candleType ? -heigth : heigth)\r\n    const candleBodyPos = (candleType ? (high - close) : (high - open)) / margin * heigth\r\n\r\n\r\n    return <div className={cssCandle} style={{\r\n        height: candleHeight,\r\n        bottom: candlePos,\r\n    }}>\r\n        <div className={cssCandleBody} style={{\r\n            height: candleBodyHeight, \r\n            backgroundColor: candleColor,\r\n            top: candleBodyPos,\r\n        }}/>\r\n        <div className={cssCandleWick} style={{\r\n            backgroundColor: candleColor,\r\n        }}/>\r\n    </div>\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport CandleView from './components/CandleView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CandleView/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}